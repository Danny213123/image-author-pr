name: Extract Author Image and Create Bio
on:
  issues:
    types: [opened]

jobs:
  extract-author-info:
    permissions: write-all
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, '[New Author]')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          
      - name: Extract author information
        id: extract
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const body = issue.data.body;
            
            function extractField(body, fieldName) {
              const regex = new RegExp(`### ${fieldName}\\s*([\\s\\S]*?)(?=###|$)`, 'i');
              const match = body.match(regex);
              if (match && match[1]) {
                return match[1].trim();
              }
              return '';
            }
            
            const authorName = extractField(body, 'Author Name');
            const authorBio = extractField(body, 'Author Bio');
            
            console.log(`Author Name: ${authorName}`);
            console.log(`Author Bio: ${authorBio}`);
            
            const authorPictureSection = extractField(body, 'Author Picture');
            
            // Try multiple patterns to find an image URL
            let imageUrl = null;
            
            // Look for any image markdown format
            const mdImageRegex = /!\[(?:.*?)\]\((https:\/\/[^)\s]+)\)/g;
            const mdMatches = [...body.matchAll(mdImageRegex)];
            if (mdMatches.length > 0) {
              imageUrl = mdMatches[0][1];
              console.log(`Found image URL (markdown): ${imageUrl}`);
            }
            
            // Grab github image link
            if (!imageUrl) {
              const ghImageRegex = /https:\/\/user-images\.githubusercontent\.com\/[^\s)]+/g;
              const ghMatches = [...body.matchAll(ghImageRegex)];
              if (ghMatches.length > 0) {
                imageUrl = ghMatches[0][0];
                console.log(`Found GitHub image URL: ${imageUrl}`);
              }
            }
            
            // GitHub's asset URLs
            if (!imageUrl) {
              const assetRegex = /https:\/\/github\.com\/[^\/]+\/[^\/]+\/assets\/\d+\/[^\s)]+/g;
              const assetMatches = [...body.matchAll(assetRegex)];
              if (assetMatches.length > 0) {
                imageUrl = assetMatches[0][0];
                console.log(`Found GitHub asset URL: ${imageUrl}`);
              }
            }
            
            // Any URL ending with an image extension
            if (!imageUrl) {
              const extRegex = /https?:\/\/[^\s)]+\.(jpg|jpeg|png|gif|webp)/gi;
              const extMatches = [...body.matchAll(extRegex)];
              if (extMatches.length > 0) {
                imageUrl = extMatches[0][0];
                console.log(`Found image URL by extension: ${imageUrl}`);
              }
            }
            
            core.setOutput('author_name', authorName);
            core.setOutput('author_bio', authorBio);
            core.setOutput('image_url', imageUrl);
            
            return {
              authorName,
              authorBio,
              imageUrl
            };
            
      - name: Download Author Image
        id: download
        if: steps.extract.outputs.image_url && steps.extract.outputs.author_name
        run: |
          mkdir -p blogs/authors/data
          
          # Extract information
          IMAGE_URL="${{ steps.extract.outputs.image_url }}"
          AUTHOR_NAME="${{ steps.extract.outputs.author_name }}"
          
          echo "Author name: $AUTHOR_NAME"
          echo "Attempting to download image from: $IMAGE_URL"
          
          # Generate a sanitized filename using the author name (with dashes instead of underscores)
          SANITIZED_NAME=$(echo "$AUTHOR_NAME" | tr -cd '[:alnum:] ._-' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          
          # Determine file extension from URL or content type
          EXTENSION="jpg"  # Default
          
          if [[ "$IMAGE_URL" =~ \.(jpg|jpeg|png|gif|webp)($|\?) ]]; then
            EXTENSION="${BASH_REMATCH[1]}"
            echo "Detected extension from URL: $EXTENSION"
          else
            # Try to get content type using curl HEAD request
            echo "Checking content type..."
            CONTENT_TYPE=$(curl -sI -H "Authorization: token ${{ secrets.PAT_TOKEN }}" "$IMAGE_URL" | grep -i "content-type:" | head -n 1 | cut -d' ' -f2- | tr -d '\r')
            echo "Content-Type: $CONTENT_TYPE"
            
            if [[ "$CONTENT_TYPE" == *"image/jpeg"* ]]; then
              EXTENSION="jpg"
            elif [[ "$CONTENT_TYPE" == *"image/png"* ]]; then
              EXTENSION="png"
            elif [[ "$CONTENT_TYPE" == *"image/gif"* ]]; then
              EXTENSION="gif"
            elif [[ "$CONTENT_TYPE" == *"image/webp"* ]]; then
              EXTENSION="webp"
            fi
            echo "Determined extension from content type: $EXTENSION"
          fi
          
          # Set final filename with extension - Named after the author with proper capitalization
          FINAL_FILENAME="${SANITIZED_NAME}.${EXTENSION}"
          echo "Final filename: $FINAL_FILENAME"
          
          # Download path
          DOWNLOAD_PATH="blogs/authors/data/$FINAL_FILENAME"
          
          # Download the image with authentication
          echo "Downloading image with authentication..."
          curl -L -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
               -H "Accept: image/*" \
               -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
               "$IMAGE_URL" -o "$DOWNLOAD_PATH"
          
          # Verify the download
          if [ -f "$DOWNLOAD_PATH" ] && [ -s "$DOWNLOAD_PATH" ]; then
            if file "$DOWNLOAD_PATH" | grep -q "image"; then
              echo "Successfully downloaded image to: $DOWNLOAD_PATH"
              echo "image_path=$DOWNLOAD_PATH" >> $GITHUB_OUTPUT
              echo "image_filename=$FINAL_FILENAME" >> $GITHUB_OUTPUT
            else
              echo "Downloaded file is not a valid image. Trying alternative method..."
              
              # Alternative download method
              curl -L -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                   -H "Accept: application/vnd.github.v3.raw" \
                   "$IMAGE_URL" -o "$DOWNLOAD_PATH"
                   
              if [ -f "$DOWNLOAD_PATH" ] && [ -s "$DOWNLOAD_PATH" ] && file "$DOWNLOAD_PATH" | grep -q "image"; then
                echo "Alternative download successful!"
                echo "image_path=$DOWNLOAD_PATH" >> $GITHUB_OUTPUT
                echo "image_filename=$FINAL_FILENAME" >> $GITHUB_OUTPUT
              else
                echo "Both download methods failed to get a valid image"
                exit 1
              fi
            fi
          else
            echo "Failed to download image or file is empty"
            exit 1
          fi
      
      - name: Create Author Bio File
        id: create-bio
        if: steps.download.outputs.image_path
        run: |
          mkdir -p blogs/authors
          
          # Get author info
          AUTHOR_NAME="${{ steps.extract.outputs.author_name }}"
          AUTHOR_BIO="${{ steps.extract.outputs.author_bio }}"
          
          AUTHOR_MARKDOWN=$(echo "$AUTHOR_NAME" | tr -cd '[:alnum:] ._-' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          IMAGE_FILENAME="${{ steps.download.outputs.image_filename }}"
          
          # Create author bio markdown file in the required format
          cat > "blogs/authors/${AUTHOR_MARKDOWN}.md" << EOF
          <head>
            <meta charset="UTF-8">
            <meta name="description" content="${AUTHOR_NAME}">
            <meta name="keywords" content="blog, contributor, blog author">
          </head>
          
          (${AUTHOR_NAME})=
          
          # ${AUTHOR_NAME}
          
          \`\`\`{image} ./data/${IMAGE_FILENAME}
          :alt: ${AUTHOR_NAME}
          :class: bg-primary
          :height: 250px
          :align: left
          \`\`\`
          
          ${AUTHOR_BIO}
          
          EOF
          
          # Add social links if needed in a future update
          
          echo "Created author bio file: blogs/authors/${AUTHOR_MARKDOWN}.md"
          echo "AUTHOR_MARKDOWN=$AUTHOR_MARKDOWN" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        if: steps.create-bio.outputs.AUTHOR_MARKDOWN
        id: cpr
        uses: peter-evans/create-pull-request@v7.0.6
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "Add new author: ${{ steps.extract.outputs.author_name }}"
          title: "Add new author: ${{ steps.extract.outputs.author_name }}"
          body: |
            ## New Author Bio
            
            This PR adds a new author profile for **${{ steps.extract.outputs.author_name }}**.
            
            ### üìÑ Added Files:
            - Author bio: `blogs/authors/${{ steps.create-bio.outputs.AUTHOR_MARKDOWN }}.md`
            - Author image: `${{ steps.download.outputs.image_path }}`
            
            ### üìù Author Information:
            - **Name:** ${{ steps.extract.outputs.author_name }}
            
            This PR was automatically generated from [issue #${{ github.event.issue.number }}](https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}).
          branch: author-${{ steps.create-bio.outputs.AUTHOR_MARKDOWN }}-${{ github.event.issue.number }}
          base: main
      
      - name: Comment on Issue
        if: steps.cpr.outputs.pull-request-number
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## Author Bio Created ‚úÖ
            
            Thank you for submitting your information! I've created a pull request with your author bio.
            
            ### üîç Summary:
            - Created author bio for: **${{ steps.extract.outputs.author_name }}**
            - Saved image as: `blogs/authors/data/${{ steps.download.outputs.image_filename }}`
            - Created Pull Request [#${{ steps.cpr.outputs.pull-request-number }}](${{ steps.cpr.outputs.pull-request-url }})
            
            The PR with your author bio has been created and is ready for review. Once approved, your profile will be published to the website.
            
            Thank you for your contribution!
          reactions: '+1'
