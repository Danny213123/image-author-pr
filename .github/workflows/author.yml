name: Extract Author Image
on:
  issues:
    types: [opened]

jobs:
  extract-author-image:
    permissions: write-all
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, '[New Author]')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          
      - name: Extract issue information
        id: extract
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Extract author name from issue title
            const authorName = issue.data.title.replace('[New Author]', '').trim();
            console.log(`Author name: ${authorName}`);
            
            // Get full issue data including comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Log the full issue body for debugging
            console.log("Full issue body:");
            console.log(issue.data.body);
            
            // Combine issue body and comments for comprehensive search
            let fullText = issue.data.body;
            comments.data.forEach(comment => {
              fullText += '\n' + comment.body;
            });
            
            // Try all potential patterns for image URLs in GitHub issues
            let imageUrl = null;
            
            // Method 1: Standard markdown image syntax
            let imageRegex = /!\[(?:.*?)\]\((https:\/\/[^)\s]+)\)/g;
            let matches = [...fullText.matchAll(imageRegex)];
            if (matches.length > 0) {
              imageUrl = matches[0][1];
              console.log(`Found image URL (markdown syntax): ${imageUrl}`);
            }
            
            // Method 2: GitHub's uploaded image syntax (user-content URLs)
            if (!imageUrl) {
              imageRegex = /https:\/\/user-images\.githubusercontent\.com\/[^\s)]+/g;
              matches = [...fullText.matchAll(imageRegex)];
              if (matches.length > 0) {
                imageUrl = matches[0][0];
                console.log(`Found GitHub user-content image URL: ${imageUrl}`);
              }
            }
            
            // Method 3: GitHub's asset image links
            if (!imageUrl) {
              imageRegex = /https:\/\/github\.com\/[^\/]+\/[^\/]+\/assets\/\d+\/[^\s)]+/g;
              matches = [...fullText.matchAll(imageRegex)];
              if (matches.length > 0) {
                imageUrl = matches[0][0];
                console.log(`Found GitHub asset image URL: ${imageUrl}`);
              }
            }
            
            // Method 4: Any URL ending with image extension
            if (!imageUrl) {
              const imageExtRegex = /https?:\/\/[^\s)]+\.(jpg|jpeg|png|gif|webp)/gi;
              const imageExtMatches = [...fullText.matchAll(imageExtRegex)];
              if (imageExtMatches.length > 0) {
                imageUrl = imageExtMatches[0][0];
                console.log(`Found image URL (by extension): ${imageUrl}`);
              }
            }
            
            // Store the extracted information
            core.setOutput('author_name', authorName);
            core.setOutput('image_url', imageUrl);
            
            return { authorName, imageUrl };
            
      - name: Download Author Image
        id: download
        if: steps.extract.outputs.image_url
        run: |
          mkdir -p images/authors
          
          # Extract filename from URL
          IMAGE_URL="${{ steps.extract.outputs.image_url }}"
          echo "Attempting to download image from: $IMAGE_URL"
          
          # Generate a sanitized filename using the author name
          AUTHOR_NAME="${{ steps.extract.outputs.author_name }}"
          SANITIZED_NAME=$(echo "$AUTHOR_NAME" | tr -cd '[:alnum:] ._-' | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
          
          # Determine file extension from URL or content type
          EXTENSION="jpg"  # Default
          
          # Try to get extension from URL
          if [[ "$IMAGE_URL" =~ \.(jpg|jpeg|png|gif|webp)($|\?) ]]; then
            EXTENSION="${BASH_REMATCH[1]}"
            echo "Detected extension from URL: $EXTENSION"
          else
            # Try to get content type using curl HEAD request
            echo "Checking content type..."
            CONTENT_TYPE=$(curl -sI "$IMAGE_URL" | grep -i "content-type:" | head -n 1 | cut -d' ' -f2- | tr -d '\r')
            echo "Content-Type: $CONTENT_TYPE"
            
            if [[ "$CONTENT_TYPE" == *"image/jpeg"* ]]; then
              EXTENSION="jpg"
            elif [[ "$CONTENT_TYPE" == *"image/png"* ]]; then
              EXTENSION="png"
            elif [[ "$CONTENT_TYPE" == *"image/gif"* ]]; then
              EXTENSION="gif"
            elif [[ "$CONTENT_TYPE" == *"image/webp"* ]]; then
              EXTENSION="webp"
            fi
            echo "Determined extension from content type: $EXTENSION"
          fi
          
          # Set final filename with extension
          FINAL_FILENAME="${SANITIZED_NAME}.${EXTENSION}"
          echo "Final filename: $FINAL_FILENAME"
          
          # Download the image with proper headers for GitHub URLs
          echo "Downloading image..."
          DOWNLOAD_PATH="images/authors/$FINAL_FILENAME"
          
          curl -L -H "Accept: image/*" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" \
            "$IMAGE_URL" -o "$DOWNLOAD_PATH"
          
          # Verify image was downloaded and is valid
          if [ -f "$DOWNLOAD_PATH" ] && [ -s "$DOWNLOAD_PATH" ]; then
            # Check if file is a valid image using file command
            if file "$DOWNLOAD_PATH" | grep -q "image"; then
              echo "image_path=$DOWNLOAD_PATH" >> $GITHUB_OUTPUT
              echo "sanitized_name=$FINAL_FILENAME" >> $GITHUB_OUTPUT
              echo "Successfully downloaded author image to: $DOWNLOAD_PATH"
            else
              echo "Downloaded file is not a valid image. Content:"
              head -c 100 "$DOWNLOAD_PATH"
              exit 1
            fi
          else
            echo "Failed to download image or file is empty"
            exit 1
          fi
      
      - name: Create Author Bio File
        id: create-bio
        if: steps.download.outputs.image_path
        run: |
          mkdir -p _authors
          
          # Generate author slug from name
          AUTHOR_NAME="${{ steps.extract.outputs.author_name }}"
          AUTHOR_SLUG=$(echo "$AUTHOR_NAME" | tr -cd '[:alnum:] ._-' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          
          # Create author bio markdown file
          cat > "_authors/${AUTHOR_SLUG}.md" << EOF
          ---
          name: "${{ steps.extract.outputs.author_name }}"
          image: "/${{ steps.download.outputs.image_path }}"
          role: ""
          bio: ""
          social:
            - title: "github"
              url: ""
            - title: "linkedin"
              url: ""
            - title: "twitter"
              url: ""
          ---
          EOF
          
          echo "Created author bio file: _authors/${AUTHOR_SLUG}.md"
          echo "author_slug=$AUTHOR_SLUG" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        if: steps.download.outputs.image_path
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "Add new author: ${{ steps.extract.outputs.author_name }}"
          title: "Add new author: ${{ steps.extract.outputs.author_name }}"
          body: |
            This PR adds a new author bio for ${{ steps.extract.outputs.author_name }}.
            
            The author image has been downloaded and saved to:
            `${{ steps.download.outputs.image_path }}`
            
            The author bio file has been created at:
            `_authors/${{ steps.create-bio.outputs.author_slug }}.md`
            
            Please update the author role, bio, and social links as needed.
            
            Generated from issue #${{ github.event.issue.number }}
          branch: ${{ github.actor }}-${{ github.event.issue.number }}
          base: main
      
      - name: Comment on Issue
        if: steps.cpr.outputs.pull-request-number
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          token: ${{ secrets.PAT_TOKEN }}
          body: |
            ## Author Bio Created
            
            Thank you for submitting your author information! I've created a pull request with your author bio and image.
            
            [View Pull Request #${{ steps.cpr.outputs.pull-request-number }}](${{ steps.cpr.outputs.pull-request-url }})
            
            The PR includes:
            - Your author bio file with placeholder information
            - Your uploaded image
            
            Please review the PR and update any missing information (role, bio, social links, etc.) directly in the PR.
          reactions: '+1'
